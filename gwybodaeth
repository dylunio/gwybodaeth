#!/usr/bin/env perl

use warnings;
use strict;
use lib '.';
use lib 'Parsers';
use lib 'Write';

use Carp qw(croak);
use Getopt::Long;
use XML::Twig;

# gwybodaeth specific modules
use Read;

# Load possible writers
opendir(my $dh, 'Write/') or croak "cannot open Write directory: $!";
for my $file (readdir($dh)) {
    if ($file =~ m/^(Write.+)\.pm$/) {
        eval "use $1";
    }
}
closedir($dh);

# Load possible parsers
opendir($dh, 'Parsers/') or croak "cannot open Parsers director: $!";
for my $file (readdir($dh)) {
    if ($file =~ m/^(.+)\.pm$/) {
        eval "use $1";
    }
}
closedir($dh);

# Load configuration
my $file = 'Config/config';
-e $file or croak "you need a configuration file: $!";

my $twig = XML::Twig->new();
$twig->parsefile($file);

my @converters = $twig->root->children( 'converter' );
my %convert = ();

for my $conv (@converters) {
    my $name = $conv->first_child_text('name');
    my $parser = $conv->first_child_text('parser');
    my $writer = $conv->first_child_text('writer');
    
    $convert{$name} = { parser => $parser, writer => $writer };
}

my $data;
my $map;
my $in_type;

GetOptions('src|source=s' => \$data,
           'map=s' => \$map,
           'input|in=s' => \$in_type );

my $input = Read->new();

my $len;
if (-f $data) {
    $len = $input->get_file_data($data);
} else {
    $len = $input->get_url_data($data);
}

die "Empty file." if ($len < 1);

my $mapping = Read->new();

if (-f $map) {
    $len = $mapping->get_file_data($map);
} else {
    $len = $mapping->get_url_data($map);
}

die "Empty site." if ($len < 1);

my @data = @{$mapping->get_input_data};

my $map_parser = N3->new();

my $map_triples = $map_parser->parse(@data);

my $parser;
my $writer;
if (defined($convert{$in_type})) {
    my $write_mod = $convert{$in_type}->{'writer'};
    my $parse_mod = $convert{$in_type}->{'parser'};
    $parser = eval { $parse_mod->new() };
    $writer = eval { $write_mod->new() };
} else {
    croak "$in_type is not defined in the config file";
}

my $parsed_data_ref = $parser->parse(@{ $input->get_input_data });

$writer->write_rdf($map_triples,$parsed_data_ref);
